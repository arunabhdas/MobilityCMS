== mobilitycms

Generate using
$ rails new mobilitycms


Generate rspec using :

bin/rails generate rspec:install

Add require capybara/rspec to spec_helper.rb

Run bundle binstubs respec-core to allow us to run rspec specifically with our rails app

rm -rf test directory since all of our tests will be in the spec directory

bin/rake db:migrate to run any pending migrations

bin/rake db:migrate RAILS_ENV=test to run any pending migrations for test database

$ rails generate scaffold category title:string description:text

heroku run rake db:migrate to ensure that db:migrate runs on heroku

bin/rake spec to run tests generated by rspec

mkdir -p spec/features/categories

touch spec/features/categories/create_spec.rb

Run the tests we created as follows
bin/rspec --format=documentation spec/features/categories/create_spec.rb 

Create model for StoryStream
bin/rails generate model story_stream category:references content:text 

Create controller for StoryStream
bin/rails generate controller story_streams index 

View routes as follows
bin/rake routes

* Version
ruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-darwin14]
Rails 4.2.4


System dependencies
--------------------

Configuration
---------------

Database creation
-----------------

Database initialization
-------------------------

How to run the test suite
-------------------------

Services (job queues, cache servers, search engines, etc.)
----------------------------------------------------------

Deployment instructions
-------------------------
git push heroku master

Adding bootstrap to project
---------------------------

Follow the steps outlined in this stackoverflow thread
http://stackoverflow.com/questions/18371318/installing-bootstrap-3-on-rails-app

Steps to take:

Download Bootstrap
Direct download link Bootstrap 3.1.1
Or got to http://getbootstrap.com/
Copy

bootstrap/dist/css/bootstrap.css
bootstrap/dist/css/bootstrap.min.css 
to: app/assets/stylesheets

Copy

bootstrap/dist/js/bootstrap.js
bootstrap/dist/js/bootstrap.min.js 
to: app/assets/javascripts

Append to: app/assets/stylesheets/application.css

*= require bootstrap
Append to: app/assets/javascripts/application.js

//= require bootstrap
That is all. You are ready to add a new cool Bootstrap template.

Why app/ instead of vendor/

It is important to add the files to app/assets, so in the future you'll be able to overwrite Bootstrap styles.

If later you want to add a custom.css.scss file with custom styles. You'll have something similar to this in application.css:

 *= require bootstrap                                                            
 *= require custom  
If you placed the bootstrap files in app/assets, everything works as expected. But, if you placed them in vendor/assets, the Bootstrap files will be loaded last. Like this:

<link href="/assets/custom.css?body=1" media="screen" rel="stylesheet">
<link href="/assets/bootstrap.css?body=1" media="screen" rel="stylesheet">
So, some of your customizations won't be used as the Bootstrap styles will override them.

Reason behind this

Rails will search for assets in many locations; to get a list of this locations you can do this:

$ rails console
> Rails.application.config.assets.paths
In the output you'll see that app/assets takes precedence, thus loading it first.

Troubleshooting
--------------

PG::DuplicateColumn: ERROR: column already exists

Error:

PG::DuplicateColumn: ERROR:  column of relation table_name already exists

$ rake db:migrate
20150710135824 AddStatusToUser: migrating
-- add_column(:users, :status, :integer)
rake aborted!
StandardError: An error has occurred, this and all later migrations canceled:

PG::DuplicateColumn: ERROR:  column "status" of relation "users" already exists
: ALTER TABLE "users" ADD COLUMN "status" integer/home/sachin/.rvm/gems/ruby-2.0.0-p598@demo_app/gems/activerecord-4.1.0/lib/active_record/connection_adapters/postgresql/database_statements.rb:128:in `async_exec'

Solution:

We need to remove existing column and then need to do migration. 

1.) With ruby on rails,

        Open terminal and run "rails db" command it will connect with database. Then you can drop that added columns from here.

        You need to run this command for alter table:
        ALTER TABLE users DROP COLUMN status;

2.) Open postgresql console for drop column. 
         
         Open terminal and run "psql -U postgres" command then it will open psql console.Then you can drop that added columns from here.

        You need to run this command for alter table:
        ALTER TABLE users DROP COLUMN status;

